
type TagNameToClass = {
    a: HTMLAnchorElement,
    div: HTMLDivElement,
    span: HTMLSpanElement,
    p: HTMLParagraphElement,
    img: HTMLImageElement,

    table: HTMLTableElement,
    td: HTMLTableColElement,
    th: HTMLTableHeaderCellElement,
    tr: HTMLTableRowElement,
    thead: HTMLElement,
    tbody: HTMLElement,
    tfoot: HTMLElement,

    form: HTMLFormElement,
    input: HTMLInputElement,
    textarea: HTMLTextAreaElement,
    select: HTMLSelectElement,
    option: HTMLOptionElement,
    button: HTMLButtonElement,
    audio: HTMLAudioElement,
    video: HTMLVideoElement,
    canvas: HTMLCanvasElement,
    progress: HTMLProgressElement,

    html: HTMLHtmlElement,
    style: HTMLStyleElement,
    script: HTMLScriptElement,
    body: HTMLBodyElement,
    iframe: HTMLIFrameElement,

    area: HTMLElement,
    article: HTMLElement,
    aside: HTMLElement,
    em: HTMLElement,
    strong: HTMLElement,
    base: HTMLElement,
    bdi: HTMLElement,
    bdo: HTMLElement,
    blockquote: HTMLElement,
    caption: HTMLElement,
    time: HTMLElement,
    cite: HTMLElement,
    samp: HTMLElement,
    kbd: HTMLElement,
    col: HTMLElement,
    colgroup: HTMLElement,
    data: HTMLElement,
    datalist: HTMLElement,
    dd: HTMLElement,
    dt: HTMLElement,
    dl: HTMLElement,
    del: HTMLElement,
    details: HTMLElement,
    dfn: HTMLElement,
    dialog: HTMLElement,
    embed: HTMLElement,
    fieldset: HTMLElement,
    figure: HTMLElement,
    footer: HTMLElement,
    head: HTMLElement,
    header: HTMLElement,
    hgroup: HTMLElement,
    hr: HTMLElement,
    i: HTMLElement,
    ins: HTMLElement,
    keygen: HTMLElement,
    label: HTMLElement,
    legend: HTMLElement,
    li: HTMLElement,
    ol: HTMLElement,
    ul: HTMLElement,
    link: HTMLElement,
    main: HTMLElement,
    map: HTMLElement,
    mark: HTMLElement,
    menu: HTMLElement,
    menuitem: HTMLElement,
    meta: HTMLElement,
    meter: HTMLElement,
    nav: HTMLElement,
    noscript: HTMLElement,
    object: HTMLElement,
    optgroup: HTMLElement,
    output: HTMLElement,
    param: HTMLElement,
    pre: HTMLElement,
    q: HTMLElement,
    rb: HTMLElement,
    rp: HTMLElement,
    rt: HTMLElement,
    rtc: HTMLElement,
    ruby: HTMLElement,
    s: HTMLElement,
    section: HTMLElement,
    small: HTMLElement,
    source: HTMLElement,
    sub: HTMLElement,
    sup: HTMLElement,
    summary: HTMLElement,
    template: HTMLElement,

    track: HTMLElement,
    u: HTMLElement,
    'var': HTMLElement,

    h1: HTMLElement,
    h2: HTMLElement,
    h3: HTMLElement,
    h4: HTMLElement,
    h5: HTMLElement,
    h6: HTMLElement,
    address: HTMLElement,
};

/**
 * @see https://stackoverflow.com/a/54975267/2750743
 * particularly useful for replacing `any` type from a lib definition with exact type
 */
export type Overwrite<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;

type NormalizeAttributeType<prop extends string | number | symbol, T> = T extends boolean ? prop : T;

export declare const Dom: <TTagName extends keyof TagNameToClass>(
    tagName: TTagName,
    attributes?: Overwrite<{
        [prop in keyof TagNameToClass[TTagName]
            as Lowercase<prop extends string ? prop : never>
        ]?: NormalizeAttributeType<prop, TagNameToClass[TTagName][prop]>
    }, {
        class?: string,
        style?: string,
    }> & Record<string, string | number | Function>,
    children?: HTMLElement[] | string | number,
) => TagNameToClass[TTagName];
